function e(e){for(var t=e[0],r=1,n=arguments.length;r<n;r++)t+=arguments[r]+e[r];return t}const t=new WeakMap,r=(e,...r)=>{const{t:o,v:s}=n(e,r),c=t.get(e)||t.set(e,{}).get(e);return(c[o]||(c[o]=[o])).concat(s.map((e=>r[e])))},n=(e,t)=>{const r=[e[0]],n=[];for(let o=0,c=0,a=0,{length:l}=t;c<l;c++)t[c]instanceof s?r[o]+=t[c].v+e[c+1]:(n[a++]=c,r[++o]=e[c+1]);return{t:r,v:n}},o=e=>new s(e);function s(e){this.v=e}const{defineProperty:c}=Object,a=(e,t)=>(n,...o)=>new Promise(((s,c)=>{if(n.some((e=>e.includes("?")))){const e=new Error("SQLITE_ERROR: SQL injection hazard");e.code="SQLITE_ERROR",c(e)}else{const[a,...l]=r(n,...o);e[t](a.join("?"),l,((e,t)=>{e?c(e):s(t)}))}}));const{assign:l}=Object,i="function"==typeof importScripts,u=i?".":import.meta.url.replace(/\/[^/]*$/,""),p=e=>new Promise(((t,r)=>{const n=()=>{const e=self.module.exports;delete self.exports,self.module=void 0,t(e)};if(self.exports={},self.module={exports:exports},i)importScripts(e),n();else{const{head:t}=document;l(t.appendChild(document.createElement("script")),{onload(){t.removeChild(this),n()},onerror:r,src:e})}})),d=(e,t=1)=>new Promise(((r,n)=>{l(indexedDB.open(e,t),{onupgradeneeded({target:{result:e,transaction:t}}){e.objectStoreNames.contains("sqlite")||e.createObjectStore("sqlite").createIndex("buffer","buffer",{unique:!0}),l(t,{oncomplete(){r(e)}})},onsuccess({target:{result:e}}){r(e)},onerror:n})})),m=(t={})=>new Promise(((r,n)=>{const s=t.dist||u;p(s+"/sql-wasm.js").then((({default:i})=>{Promise.all([d(t.name||"sqlite-worker"),i({locateFile:e=>s+"/"+e})]).then((([s,{Database:i}])=>{const u=e=>s.transaction(["sqlite"],e).objectStore("sqlite");l(u("readonly").get("buffer"),{onsuccess(){let n=Promise.resolve();const{result:s}=this,p=new i(s||t.database||new Uint8Array(0)),d=()=>{n=n.then((()=>new Promise(((e,r)=>{const n=p.export();l(u("readwrite").put(n,"buffer").transaction,{oncomplete(){e(),t.update&&t.update(n)},onabort:r,onerror:r})}))))};s||d();const{all:m,get:h,query:w,raw:g,transaction:b}=function(t){const r=a(t,"run");return{transaction(){let e=r(["BEGIN TRANSACTION"]);return c(((...t)=>{e=e.then((()=>r(...t)))}),"commit",{value:()=>e=e.then((()=>r(["COMMIT"])))})},all:a(t,"all"),get:a(t,"get"),raw:(t,...r)=>o(e(t,...r)),query:r}}({all(e,t,r){try{const n=p.exec(e,t),o=[];n.forEach(f,o),r(null,o)}catch(e){r(e)}},get(e,t,r){try{const n=p.exec(e+" LIMIT 1",t),o=[];n.forEach(f,o),r(null,o.shift()||null)}catch(e){r(e)}},run(e,t,r){try{r(null,p.run(e,t))}catch(e){r(e)}}});let y=0;r({all:m,get:h,raw:g,transaction:b,query(e){return/\b(?:INSERT|DELETE|UPDATE)\b/i.test(e[0])&&(clearTimeout(y),y=setTimeout(d,t.timeout||250)),w.apply(this,arguments)}})},onerror:n})}),n)}))}));function f({columns:e,values:t}){for(let{length:r}=t,n=0;n<r;n++){const r=t[n],o={};for(let{length:t}=e,n=0;n<t;n++)o[e[n]]=r[n];this.push(o)}}const{defineProperty:h}=Object,w=new Map,g=(t,...r)=>o(e(t,...r));let b=0;function y(e={}){const{credentials:t}=e,n=e.dist||u,o=e.worker||n+"/worker.js",s=e=>(t,...n)=>{const[o,...s]=r(t,...n);return c(e,{template:o,values:s})},c=(e,t)=>new Promise(((r,n)=>{const o=b++;w.set(o,{resolve:r,reject:n}),a.postMessage({id:o,action:e,options:t})})),a=l(new Worker(/^(?:\.|\/)/.test(o)?o:(e=>URL.createObjectURL(new Blob([`importScripts('${e}')`],{type:"text/javascript"})))(o),{credentials:t}),{onmessage({data:{id:e,result:t,error:r}}){const{resolve:n,reject:o}=w.get(e);w.delete(e),r?o(r):n(t)}}),i=s("query");return c("init",l({dist:n,library:n+"/init.js"},e)).then((()=>({transaction(){let e=i(["BEGIN TRANSACTION"]);return h(((...t)=>{e=e.then((()=>i(...t)))}),"commit",{value:()=>e=e.then((()=>i(["COMMIT"])))})},all:s("all"),get:s("get"),query:i,raw:g})))}export{y as SQLiteWorker,m as init};
